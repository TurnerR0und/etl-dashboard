name: Build, Test, and Deploy ETL Application

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.10
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Tests with Pytest
        run: |
          pytest

  deploy-to-vps:
    needs: build-and-test
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: turnerr0und/etl-dashboard:latest # I've updated this to your username

      - name: Deploy to VPS
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USERNAME }}
          key: ${{ secrets.VPS_SSH_PRIVATE_KEY }}
          passphrase: ${{ secrets.VPS_SSH_PASSPHRASE }} # Keep this if you're using a passphrase
          script: |
            # Navigate to the app directory, cloning it if it doesn't exist
            if [ ! -d "~/etl-dashboard" ]; then
              git clone https://github.com/${{ github.repository }}.git ~/etl-dashboard
              cd ~/etl-dashboard
            else
              cd ~/etl-dashboard
              # Pull the latest changes from the main branch
              git pull origin main
            fi
            
            # Create the .env file on the server with your secrets
            echo "DATABASE_URL=${{ secrets.DATABASE_URL }}" > .env
            echo "REDIS_URL=${{ secrets.REDIS_URL }}" >> .env
            echo "API_SECRET_TOKEN=${{ secrets.API_SECRET_TOKEN }}" >> .env
            
            # Use the modern 'docker compose' command
            docker compose pull
            docker compose up -d --force-recreate